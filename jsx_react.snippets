# component
snippet recomp "react component"
import React from 'react';
import PropTypes from 'prop-types';

class $1 extends React.Component {
	render () {
		return (
			${0}
		);
	}
}

$1.propTypes = {
	${2}: PropTypes.${3:string}.isRequired
};

export default $1;
endsnippet

snippet comp-sc "shallow component"
import React from 'react';
import shallowCompare from 'react-addons-shallow-compare';

class ${1:} extends React.Component {
	shouldComponentUpdate (nextProps, nextState) {
		return shallowCompare(this, nextProps, nextState)
	}
	render () {
		return (
			${0}
		);
	}
}

export default $1
endsnippet

snippet compred "redux component"
import React, {PropTypes} from 'react'
import {bindActionCreators} from 'redux'
import {connect} from 'react-redux'
import * as ${4:} from '../../actions/$4'

export class ${1:} extends React.Component {
	render () {
		return (
			${0}
		)
	}
}

$1.propTypes = {
	${2:}: PropTypes.${3:object}.isRequired,
	actions: PropTypes.object.isRequired
}

function mapStateToProps (state, ownProps) {
	return {
	$2: state.$2
	}
}

function mapDispatchToProps (dispatch) {
	return {
		actions: bindActionCreators($4, dispatch)
	}
}

export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet stfc "stateless functional component"
import React from 'react';
import PropTypes from 'prop-types';

$1.propTypes = {
	${2}: PropTypes.${3:string}.isRequired
};

function $1 (${4}) {
	return (
		${0}
	);
}


export default $1;
endsnippet

snippet con "react component constructor"
constructor (props) {
	super(props);
	${0}
}
endsnippet

snippet bnd "bind method to this"
this.${1:} = this.$1.bind(this);
endsnippet

snippet rem "component method" b
$1 ($2) {
	$0
}
endsnippet

## lifecycle
#mounting
snippet recdm "react componentDidMount"
componentDidMount () {
	${0}
}
endsnippet

#updating
snippet recwrp "react componentWillReceiveProps"
componentWillReceiveProps (nextProps) {
	${0}
}
endsnippet

snippet reshcu "react shouldComponentUpdate"
shouldComponentUpdate (nextProps, nextState) {
	${0}
}
endsnippet

snippet recwup "react componentWillUpdate"
componentWillUpdate (nextProps, nextState) {
	${0}
}
endsnippet

snippet recdup "react componentDidUpdate"
componentDidUpdate (prevProps, prevState) {
	${0}
}
endsnippet

#unmounting
snippet recwu "React componentWillUnmount"
componentWillUnmount () {
	${0}
}
endsnippet

snippet rept "React set props types"
$1.propTypes = {
	${2:}: PropTypes.${3:object}.isRequired
};
endsnippet

# JSX
snippet t "jsx tag"
<${1}$0>
</${1/([^\s]+).*/$1/}>
endsnippet

snippet tt "jsx tag single line" w
<${1}>$0</${1/([^\s]+).*/$1/}>
endsnippet

snippet tsc "self-closing tag" w
<$1/>
endsnippet

snippet reprops "react props"
static propTypes = {
	$1: React.PropTypes.${2:object}.isRequired
},

static defaultProps = {
	$1: $3
}
endsnippet

snippet reref "ref={}" w
ref={c => this.$1 = c}
endsnippet

snippet edl "export default lambda" b
export default ($1) => (
	$0
);
endsnippet
